1.使用MVP模式构造
2.日历 天气 文章
3.view的点击分发机制
   例：button的点击事件：activity.dispatchTouchEvent-->layout.dispatchTouchEvent-->
    layout.onInterceptTouchEvent（默认不拦截）-->button.dispatchTouchEvent-->button.onTouch-->
    button.onTouchEvent-->button.onClick

    dispatchTouchEvent 的事件分发逻辑如下：
    如果 return true，事件会分发给当前 View 并由 dispatchTouchEvent 方法进行消费，同时事件会停止向下传递；
    如果 return false，事件分发分为两种情况：
    1.如果当前 View 获取的事件直接来自 Activity，则会将事件返回给 Activity 的 onTouchEvent 进行消费；
    2.如果当前 View 获取的事件来自外层父控件，则会将事件返回给父 View 的  onTouchEvent 进行消费。

    onInterceptTouchEvent 的事件拦截逻辑如下：
    如果 onInterceptTouchEvent 返回 true，则表示将事件进行拦截，并将拦截到的事件交由当前 View 的 onTouchEvent 进行处理；
    如果 onInterceptTouchEvent 返回 false，则表示将事件放行，当前 View 上的事件会被传递到子 View 上，再由子 View 的 dispatchTouchEvent 来开始这个事件的分发；
    如果 onInterceptTouchEvent 返回 super.onInterceptTouchEvent(ev)，事件默认会被拦截，并将拦截到的事件交由当前 View 的 onTouchEvent 进行处理。

    onTouchEvent 的事件响应逻辑如下：
    如果事件传递到当前 View 的 onTouchEvent 方法，而该方法返回了 false，那么这个事件会从当前 View 向上传递，并且都是由上层 View 的 onTouchEvent 来接收，如果传递到上面的 onTouchEvent 也返回 false，这个事件就会“消失”，而且接收不到下一次事件。
    如果返回了 true 则会接收并消费该事件。
    如果返回 super.onTouchEvent(ev) 默认处理事件的逻辑和返回 false 时相同。
4.添加编译时注解